type AppUserProfile @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
}

type Season @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
}

type FieldParent @model @auth(rules: [{allow: public}]) {
  id: ID!
  fieldName: String!
  fieldNumberBase: String!
  country: CountryKey!
  stateOrProvince: StateOrProvinceKey!
  plssLocation: PlssLocationObject!
  mapCenterPoint: GeoPointObject
  mapCenterZoom: Int
  county: String!
  isOrganic: Boolean!
  seasonID: ID!
  FieldChildren: [FieldChild] @hasMany(indexName: "byFieldParent", fields: ["id"])
}

type FieldChild @model @auth(rules: [{allow: public}]) {
  id: ID!
  seasonID: ID!
  fieldparentID: ID! @index(name: "byFieldParent")
  hybridID: ID! @index(name: "byHybrid")
  isCertified: Boolean
  growerShares: [GrowerShareObject]!
  acres: FieldAcresObject!
  plantingDates: [PlantingDateObject!]!
  InspectionParents: [InspectionParent] @hasMany(indexName: "byFieldChild", fields: ["id"])
  fieldName: String!
  fieldNumber: String!
  hybridName: String!
  inspectionConfigurations: [InspectionConfigurationObject]
  detasselingStandardSeedCornApprovalDate: AWSDate
  leafToTasselStandardSeedCornApprovalDate: AWSDate
  populationsStandardSeedCornApprovalDate: AWSDate
  scoutingStandardSeedCornApprovalDate: AWSDate
  detasselingStandardSeedCornApprovalUserProfile: ID
  leafToTasselStandardSeedCornApprovalUserProfile: ID
  populationsStandardSeedCornApprovalUserProfile: ID
  scoutingStandardSeedCornApprovalUserProfile: ID
  detasselingStandardSeedCornRequiredInspections: Int
  leafToTasselStandardSeedCornRequiredInspections: Int
  populationsStandardSeedCornRequiredInspections: Int
  scoutingStandardSeedCornRequiredInspections: Int
  detasselingStandardSeedCornInspectionStatus: InspectionStatusKey
  leafToTasselStandardSeedCornInspectionStatus: InspectionStatusKey
  populationsStandardSeedCornInspectionStatus: InspectionStatusKey
  scoutingStandardSeedCornInspectionStatus: InspectionStatusKey
  leafToTasselStandardSeedCornInspectionType: InspectionFormTypeKey
  populationsStandardSeedCornInspectionType: InspectionFormTypeKey
  scoutingStandardSeedCornInspectionType: InspectionFormTypeKey
  detasselingStandardSeedCornInspectionType: InspectionFormTypeKey
  leafToTasselStandardSeedCornMostRecentInspection: String
  populationsStandardSeedCornMostRecentInspection: String
  scoutingStandardSeedCornMostRecentInspection: String
  detasselingStandardSeedCornMostRecentInspection: String
}

type InspectionConfigurationObject {
  approvalDate: AWSDate
  approvalUserProfile: ID
  requiredInspections: Int!
  inspectionStatus: InspectionStatusKey!
  inspectionTypeID: ID!
  mostRecentInspection: AWSDate
}

type InspectionChild @model @auth(rules: [{allow: public}]) {
  id: ID!
  location: GeoPointObject!
  seasonID: ID!
  detasselingStandardSeedCornFormObject: DetasselingSeedCornStandardInspectionFormDataObject
  populationsStandardSeedCornFormObject: PopulationsStandardSeedCornInspectionFormDataObject
  scoutingStandardSeedCornFormObject: ScoutingStandardSeedCornInspectionFormDataObject
  leafToTasselStandardSeedCornFormObject: LeafToTasselSeedCornStandardInspectionFormDataObject
  inspectionParentID: ID! @index(name: "byInspectionParent")
  userEmail: String!
  userFirstName: String!
  userLastName: String!
  date: AWSDate!
  time: AWSTime!
}

type InspectionParent @model @auth(rules: [{allow: public}]) {
  id: ID!
  scheduledDate: AWSDate
  requiredInspections: Int
  inspectionFormType: InspectionFormTypeKey
  completionStatus: CompletionStatusKey
  seasonID: ID!
  InspectionChildren: [InspectionChild] @hasMany(indexName: "byInspectionParent", fields: ["id"])
  fieldchildID: ID! @index(name: "byFieldChild")
  inspectionTypeID: ID!
  fieldInspectionModule: FieldInspectionModuleKey!
  fieldName: String!
  fieldNumber: String!
  hybridName: String!
  mapCenter: GeoPointObject!
}

type Hybrid @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  femalePlantingNumber: Int
  splitPlantings: [SplitPlantingObject]
  seasonID: ID!
  FieldChildren: [FieldChild] @hasMany(indexName: "byHybrid", fields: ["id"])
  femaleInbredID: ID! @index(name: "byFemaleInbred")
  maleInbredID: ID! @index(name: "byMaleInbred")
  splitPlantingTypeID: ID! @index(name: "bySplitPlantingType")
}

type MaleInbred @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  antherColor: String
  glumeColor: String
  silkColor: String
  huTo50Pollen: Int
  seasonID: ID!
  Hybrids: [Hybrid] @hasMany(indexName: "byMaleInbred", fields: ["id"])
}

type FemaleInbred @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  antherColor: String
  glumeColor: String
  silkColor: String
  huTo50Silk: Int
  seasonID: ID!
  Hybrids: [Hybrid] @hasMany(indexName: "byFemaleInbred", fields: ["id"])
}

type SplitPlantingType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  numberOfPlantings: Int!
  plantingDescriptions: [PlantingDescriptionObject]
  seasonID: ID!
  Hybrids: [Hybrid] @hasMany(indexName: "bySplitPlantingType", fields: ["id"])
}

type InspectionType @model @auth(rules: [{allow: public}]) {
  id: ID!
  inspectionModule: FieldInspectionModuleKey
  cropType: CropTypeKey
  isOrganic: Boolean
  title: String
  description: String
  defaultRequiredInspections: Int
  inspectionFormType: InspectionFormTypeKey
  seasonID: ID!
}

type Grower @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  mainContact: ContactObject
  seasonID: ID!
}

enum InspectionStatusKey {
  NOT_YET_STARTED
  IN_PROGRESS
  COMPLETED
}

type CropDamageOption @model @auth(rules: [{allow: public}]) {
  id: ID!
  category: CropDamageCategoryKey
  applicableCropTypes: [CropTypeKey]
  name: String
  description: String
  seasonID: ID!
}

enum FieldInspectionModuleKey {
  SCOUTING
  POPULATIONS
  LEAF_TO_TASSEL
  DETASSELING
}

enum CountryKey {
  UNITED_STATES
  CANADA
}

enum StateOrProvinceKey {
  US_ALABAMA
  US_ALASKA
  US_ARIZONA
  US_ARKANSAS
  US_CALIFORNIA
  US_COLORADO
  US_CONNECTICUT
  US_DELAWARE
  US_FLORIDA
  US_GEORGIA
  US_HAWAII
  US_IDAHO
  US_ILLINOIS
  US_IOWA
  US_KANSAS
  US_KENTUCKY
  US_LOUISIANA
  US_MAINE
  US_MARYLAND
  US_MASSACHUSETTS
  US_MICHIGAN
  US_MINNESOTA
  US_MISSISSIPPI
  US_MISSOURI
  US_MONTANA
  US_NEBRASKA
  US_NEVADA
  US_NEW_HAMPSHIRE
  US_NEW_JERSEY
  US_NEW_MEXICO
  US_NEW_YORK
  US_NORTH_CAROLINA
  US_NORTH_DAKOTA
  US_OHIO
  US_OKLAHOMA
  US_OREGON
  US_PENNSYLVANIA
  US_RHODE_ISLAND
  US_SOUTH_CAROLINA
  US_SOUTH_DAKOTA
  US_TENNESSEE
  US_TEXAS
  US_UTAH
  US_VERMONT
  US_VIRGINIA
  US_WASHINGTON
  US_WEST_VIRGINIA
  US_WISCONSIN
  US_WYOMING
  CA_ALBERTA
  CA_BRITISH_COLUMBIA
  CA_MANITOBA
  CA_NEW_BRUNSWICK
  CA_NEWFOUNDLAND_AND_LABRADOR
  CA_NORTHWEST_TERRITORIES
  CA_NOVA_SCOTIA
  CA_NUNAVUT
  CA_ONTARIO
  CA_PRINCE_EDWARD_ISLAND
  CA_QUEBEC
  CA_SASKATCHEWAN
  CA_YUKON
}

enum CropTypeKey {
  CORN_HYBRID_SEED
  SOYBEAN_FOOD_GRADE
  SOYBEAN_MARKET
  SOYBEAN_SEED
}

enum CompletionStatusKey {
  COMPLETED
  NOT_COMPLETED
}

enum InspectionFormTypeKey {
  SCOUTING_SEED_CORN_STANDARD
  POPULATIONS_SEED_CORN_STANDARD
  LEAF_TO_TASSEL_SEED_CORN_STANDARD
  DETASSELING_SEED_CORN_STANDARD
}

type PlantingDescriptionObject {
  longText: String
  plantingNumber: Int
  shortText: String
}

type SplitPlantingObject {
  gddToThisPlanting: Int
  plantingNumber: Int
  shouldPlantFemale: Boolean
  shouldPlantMale: Boolean
  plantingText: String
}

enum CornGrowthStageKey {
  VE
  VE_V1
  V1
  V1_V2
  V2
  V2_V3
  V3
  V3_V4
  V4
  V4_V5
  V5
  V5_V6
  V6
  V6_V7
  V7
  V7_V8
  V8
  V8_V9
  V9
  V9_V10
  V10
  V10_V11
  V11
}

type CropDamageObject {
  cropType: CropTypeKey
  damageType: CropDamageCategoryKey
  cropDamageOptionID: ID!
  severity: CropDamageSeverityKey
  location: GeoPointObject
}

enum CropDamageCategoryKey {
  WEED
  INSECT
  PEST
  DISEASE
}

enum CropDamageSeverityKey {
  LOW
  MODERATE
  HIGH
}

type FieldMarkerObject {
  title: String!
  subtitle: String
  geoPoint: GeoPointObject
  isNavigatable: Boolean
}

type PlantingDateObject {
  plantingNumber: Int!
  date: AWSDate
}

type GrowerShareObject {
  growerID: ID!
  sharePercentage: Float!
}

type ContactObject {
  firstName: String!
  lastName: String!
  officePhone: AWSPhone
  mobilePhone: AWSPhone
  jobTitle: String!
  mailingAddress: AddressObject
}

type AddressObject {
  streetLineOne: String!
  streetLineTwo: String
  streetLineThree: String
  city: String!
  state: StateOrProvinceKey!
  country: CountryKey!
  zipCode: String!
  label: String
}

type FieldAcresObject {
  male: Float
  female: Float
  total: Float!
  isolation: Float
  headland: Float
}

type PlssLocationObject {
  township: String!
  section: String!
  range: String!
  townshipName: String!
  description: String
}

type GeoPointObject {
  latitude: Float!
  longitude: Float!
}

type DetasselingSeedCornStandardInspectionFormDataObject {
  comments: String
  areRoguesPresent: Boolean!
  femaleReceptiveSilk: Int!
  femaleTasselsExposed: Int!
  femaleTasselsRemaining: Int!
  femaleTasselsShedding: Int!
  maleTasselsShedding: Int!
}

type LeafToTasselSeedCornStandardInspectionFormDataObject {
  comments: String
  areRoguesPresent: Boolean!
  earShootLengthInches: Float!
  inchesToSilkEmergence: Float!
  numberOfLeaves: Float!
  silkStage: Int!
  tasselLengthInches: Float!
  earLengthInches: Float!
}

type PopulationsStandardSeedCornInspectionFormDataObject {
  comments: String
  femaleCountOne: Int!
  femaleCountTwo: Int!
  maleCount: Int!
}

type ScoutingStandardSeedCornInspectionFormDataObject {
  femaleGrowthStage: CornGrowthStageKey!
  maleGrowthStageOne: CornGrowthStageKey!
  maleGrowthStageTwo: CornGrowthStageKey!
  isWatering: Boolean!
  weeds: [CropDamageObject]
  insects: [CropDamageObject]
  pests: [CropDamageObject]
  diseases: [CropDamageObject]
  comments: String
  areRoguesPresent: Boolean!
}
 